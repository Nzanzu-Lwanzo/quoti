generator client {
  provider = "prisma-client-js"
  output   = "../dist/db"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  bio           String?
  email         String
  password      String
  quotes        Quote[] // One user uploads many quotes
  upvotedQuotes Quote[] @relation("UsersQuotes") // Many users upvote many quotes
}

model Author {
  id    String  @id @default(uuid())
  name  String  @unique
  bio   String?
  image String?
  books Book[]  @relation("BooksAuthors") // One author can have many books, and vice versa
}

model Book {
  id              String   @id @default(uuid())
  title           String
  sum             String?
  image           String?
  publishYear     Int?
  publishingHouse String?
  publishingTown  String?
  edition         String?
  authors         Author[] @relation("BooksAuthors") // One book can have many authors, and vice versa
  quotes          Quote[] // One book has many quotes
}

model Quote {
  id         String     @id @default(uuid())
  text       String
  reference  Book       @relation(fields: [bookId], references: [id], onDelete: Cascade) // One quote belongs to one book
  bookId     String
  categories Category[] @relation("QuotesCategories") // One quote may belong to many categories
  uploader   User       @relation(fields: [uploaderId], references: [id]) // Many quotes can be uploaded by one user
  uploaderId String
  upvotes    User[]     @relation("UsersQuotes") // Many quotes are upvoted by many users
}

model Category {
  id          Int     @id @default(autoincrement())
  tag         String  @unique
  description String?
  quotes      Quote[] @relation("QuotesCategories") // One category may hold to many quotes
}
